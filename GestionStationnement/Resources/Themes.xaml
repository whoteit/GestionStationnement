<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="clr-namespace:GestionStationnement.Helpers"
                    xmlns:converters="clr-namespace:GestionStationnement.Converters"
                    xmlns:local="clr-namespace:GestionStationnement.Models">

    <GradientStopCollection x:Key="GlassFillerGradient">
        <GradientStop Color="#bfffffff" Offset="0" />
        <GradientStop Color="#33ffffff" Offset="1" />
    </GradientStopCollection>

    <SolidColorBrush x:Key="GrayTextBrush" Color="LightGray" Opacity="1" />
    <SolidColorBrush x:Key="BrightBlueLight" Color="#80BFFF" Opacity="1" />
    <SolidColorBrush x:Key="PopupBackground" Color="White" Opacity="0.95" />
    <SolidColorBrush x:Key="PopupBrush" Color="Black" Opacity="0.5" />
    <SolidColorBrush x:Key="PopupForeground" Color="Black" />
    <SolidColorBrush x:Key="alternateRowColor" Color="Black" Opacity="0.1" />
    <TranslateTransform x:Key="PushedTransform" Y="1" />
    <DropShadowEffect x:Key="MouseOverGlow" Direction="270" ShadowDepth="0" BlurRadius="12" RenderingBias="Performance"
                      Color="White" />
    <SolidColorBrush x:Key="BrightBlueTan" Color="#0060BF" Opacity="1" />
    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>

    <LinearGradientBrush x:Key="MenuItemSelectionFill" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#3366CC" Offset="0" />
        <GradientStop Color="#0099CC" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="MenuItemPressedFill" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#777777" Offset="0" />
        <GradientStop Color="#AAAAAA" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="GridViewColumnHeaderBackground" Color="#20000000" />
    <SolidColorBrush x:Key="GridViewColumnHeaderBorderBackground" Color="#666666" Opacity="0.8" />
    <!-- ******************************************** -->
    <!--  Floating header style (while dragging)      -->
    <!-- ******************************************** -->
    <ControlTemplate x:Key="FloatingHeader" TargetType="{x:Type GridViewColumnHeader}">
        <Canvas x:Name="PART_FloatingHeaderCanvas">
            <Rectangle Fill="#FF000000" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"
                       Opacity="0.4697" />
        </Canvas>
    </ControlTemplate>

    <!-- ******************************************** -->
    <!--  Padding header style (right of all headers) -->
    <!-- ******************************************** -->
    <ControlTemplate x:Key="PaddingHeader" TargetType="{x:Type GridViewColumnHeader}">

        <!-- body -->
        <Grid SnapsToDevicePixels="true">
            <Border Background="{StaticResource GridViewColumnHeaderBackground}"
                    BorderBrush="{StaticResource GridViewColumnHeaderBorderBackground}"
                    BorderThickness="0,0,0,1" />
        </Grid>

        <!-- triggers -->
        <ControlTemplate.Triggers>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

    <Style x:Key="MenuScrollButtonBase" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="bg" SnapsToDevicePixels="True" Background="Transparent">
                        <ContentPresenter x:Name="ContentContainer" HorizontalAlignment="Center" Margin="0,3,0,3"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="bg" Value="{StaticResource MenuItemPressedFill}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}"
           BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.Row="1">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Grid.Column="0"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0"
                                      Style="{StaticResource MenuScrollButtonBase}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="0"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <!-- up arrow -->
                            <Path Data="M 0,4 L 3.5,0 L 7,4 Z" Fill="{StaticResource PopupForeground}" />
                        </RepeatButton>
                        <RepeatButton Grid.Column="0"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2"
                                      Style="{StaticResource MenuScrollButtonBase}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="100"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <!-- down arrow -->
                            <Path Data="M 0,0 L 3.5,4 L 7,0 Z" Fill="{StaticResource PopupForeground}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ************************************************************* -->
    <!--   Sub menu popup content                                      -->
    <!-- ************************************************************* -->
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}"
        TargetType="{x:Type ContentControl}">
        <Border CornerRadius="5" Background="{StaticResource PopupBackground}"
                BorderBrush="{StaticResource PopupBrush}" BorderThickness="1">
            <ContentPresenter Margin="0,3,0,3" />
        </Border>
    </ControlTemplate>

    <!-- round emboss -->
    <LinearGradientBrush x:Key="roundEmboss" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#80555555" Offset="0.92" />
        <GradientStop Color="#80ffffff" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GlassFillerTop" StartPoint="0,0" EndPoint="0,1.4194450378417969" Opacity="0.4"
                         GradientStops="{StaticResource GlassFillerGradient}" />

    <Style x:Key="Montest" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Blue" />
    </Style>
    <Style x:Key="PianoGlassButtonBase" TargetType="{x:Type Button}">

        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTipService.HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- body -->
                    <Grid x:Name="body" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border x:Name="buttonBody"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                Margin="1"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4"
                                BorderThickness="0"
                                Background="{TemplateBinding Background}"
                                Opacity="0.8" />

                        <Border x:Name="buttonBorder"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Opacity="0.5" />

                        <Border x:Name="buttonBorder2"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                Margin="1"
                                Opacity="0.5"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1" />

                        <Border x:Name="glasstop"
                                Grid.Row="0"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4,4,0,0"
                                Opacity="0.6"
                                Background="{StaticResource GlassFillerTop}"
                                Margin="2,2,2,0" />

                        <!-- pushed shadow -->
                        <Border x:Name="pushedShadow" Width="Auto" Height="4" Margin="1" CornerRadius="4,4,0,0"
                                HorizontalAlignment="Stretch" VerticalAlignment="Top" IsHitTestVisible="False"
                                Visibility="Hidden">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#40000000" Offset="0" />
                                    <GradientStop Color="#00000000" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>

                        <ContentPresenter x:Name="content"
                                          Grid.RowSpan="2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          Margin="{TemplateBinding Padding}" />
                    </Grid>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <!-- mouse over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.9" />
                            <Setter TargetName="buttonBorder2" Property="BorderBrush"
                                    Value=" #1E90FF" />
                        </Trigger>

                        <!-- focus -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.9" />
                            <Setter TargetName="buttonBorder2" Property="BorderBrush"
                                    Value=" #1E90FF" />
                        </Trigger>

                        <!-- pushed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBody" Property="Effect" Value="{x:Null}" />
                            <Setter TargetName="buttonBody" Property="Background" Value="#18000000" />
                            <Setter TargetName="buttonBody" Property="Visibility" Value="Visible" />
                            <Setter TargetName="buttonBorder" Property="BorderBrush" Value="Black" />
                            <Setter TargetName="buttonBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="buttonBorder2" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="pushedShadow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="glasstop" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="content" Property="RenderTransform"
                                    Value="{StaticResource PushedTransform}" />
                        </Trigger>

                        <!-- disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <Setter TargetName="buttonBorder" Property="Visibility" Value="Hidden" />
                        </Trigger>

                        <!-- default button -->
                        <Trigger Property="IsDefault" Value="True">
                            <Setter TargetName="buttonBorder2" Property="BorderThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PianoTitleButtons" TargetType="{x:Type Button}">

        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="#FF2A2A2A" />
        <Setter Property="BorderBrush" Value="#FF333333" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FF555555"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value=" #1E90FF"/>
            </Trigger>
        </Style.Triggers>
    </Style>








    <!-- ***************************************************************** -->
    <!-- Normal label                                                      -->
    <!-- ***************************************************************** -->
    <Style x:Key="LabelNormalBase" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource GrayTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ***************************************************************** -->
    <!-- Normal textblock                                                      -->
    <!-- ***************************************************************** -->
    <Style x:Key="TextBlockNormalBase" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <!-- ************************************************************* -->
    <!--   Top level header                                            -->
    <!-- ************************************************************* -->
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="0,0,0,0" StrokeThickness="0" RadiusX="4"
                       RadiusY="4" />
            <DockPanel TextOptions.TextRenderingMode="Aliased">
                <!-- icon -->
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <!-- checkmark -->
                <Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center" />
                <!-- header -->
                <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  TextBlock.FontWeight="Normal" VerticalAlignment="Center" />
            </DockPanel>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1"
                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   Placement="Bottom" VerticalOffset="-1">
                <ContentControl x:Name="SubMenuBorder" IsTabStop="false"
                                Template="{StaticResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                    <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true"
                                  Style="{StaticResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <Grid TextOptions.TextRenderingMode="Aliased">
                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle Fill="Transparent"
                                           Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                           Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="true" Margin="0"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            KeyboardNavigation.TabNavigation="Cycle" />
                        </Grid>
                    </ScrollViewer>
                </ContentControl>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Glyph" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#FF666666" />
                <Setter Property="Fill" TargetName="Glyph" Value="#848589" />
                <Setter Property="Opacity" TargetName="Icon" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ************************************************************* -->
    <!--   Top level item                                              -->
    <!-- ************************************************************* -->
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2" />
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="0,0,0,0"
                       Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" RadiusX="4" RadiusY="4" />
            <DockPanel TextOptions.TextRenderingMode="Aliased">
                <!-- icon -->
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <!-- checkmark -->
                <Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center" />
                <!-- header -->
                <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  TextBlock.FontWeight="Normal" VerticalAlignment="Center" />
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Glyph" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#90717070" />
                <Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#E0717070" />
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#FF666666" />
                <Setter Property="Fill" TargetName="Glyph" Value="#848589" />
                <Setter Property="Opacity" TargetName="Icon" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ************************************************************* -->
    <!--   Sub item header                                             -->
    <!-- ************************************************************* -->
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="3,0,3,0" StrokeThickness="0" RadiusX="4"
                       RadiusY="4" />
            <Grid TextOptions.TextRenderingMode="Aliased">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="17" />
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="17" />
                </Grid.ColumnDefinitions>
                <!-- icon -->
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,1,1,1"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <!-- checkmark -->
                <Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0099FF" FlowDirection="LeftToRight"
                      Height="11" Width="9" Visibility="Hidden" VerticalAlignment="Center" />
                <!-- header -->
                <ContentPresenter x:Name="header" Grid.Column="2" ContentSource="Header"
                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" TextBlock.Foreground="{TemplateBinding Foreground}" />
                <!-- input gesture text -->
                <TextBlock x:Name="GestureText" Grid.Column="4" Margin="{TemplateBinding Padding}"
                           Text="{TemplateBinding InputGestureText}" Foreground="#FF0099FF" Visibility="Collapsed"
                           VerticalAlignment="Center" />
                <!-- right arrow -->
                <Path Grid.Column="5" Data="M 0,0 L 4,3.5 L 0,7 Z" Fill="{TemplateBinding Foreground}" Margin="4,0,0,0"
                      VerticalAlignment="Center" />
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2"
                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   Placement="Right" VerticalOffset="-3">
                <ContentControl x:Name="SubMenuBorder" IsTabStop="false"
                                Template="{StaticResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                    <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true"
                                  Style="{StaticResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <Grid TextOptions.TextRenderingMode="Aliased">
                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle Fill="Transparent"
                                           Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                           Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="true" Margin="0"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            KeyboardNavigation.TabNavigation="Cycle" />
                        </Grid>
                    </ScrollViewer>
                </ContentControl>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Glyph" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" TargetName="GestureText" Value="#80FFFFFF" />
                <Setter Property="TextBlock.Foreground" TargetName="header" Value="White" />
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}" />
                <Setter Property="Fill" TargetName="Glyph" Value="#80FFFFFF" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" TargetName="GestureText" Value="#FF666666" />
                <Setter Property="Foreground" Value="#FF666666" />
                <Setter Property="Fill" TargetName="Glyph" Value="#FF666666" />
                <Setter Property="Opacity" TargetName="Icon" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ************************************************************* -->
    <!--   Sub menu item                                               -->
    <!-- ************************************************************* -->
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="3,0,3,0" StrokeThickness="0" RadiusX="4"
                       RadiusY="4" />
            <Grid TextOptions.TextRenderingMode="Aliased">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="17" />
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="17" />
                </Grid.ColumnDefinitions>
                <!-- icon -->
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,1,1,1"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <!-- checkmark -->
                <Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0099FF" FlowDirection="LeftToRight"
                      Height="11" Width="9" Visibility="Hidden" VerticalAlignment="Center" />
                <!-- header -->
                <ContentPresenter x:Name="header" Grid.Column="2" ContentSource="Header"
                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" TextBlock.Foreground="{TemplateBinding Foreground}" />
                <!-- input gesture text -->
                <TextBlock x:Name="GestureText" Grid.Column="4" Margin="{TemplateBinding Padding}"
                           Text="{TemplateBinding InputGestureText}" Foreground="#FF0099FF" FontWeight="Normal"
                           VerticalAlignment="Center" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Glyph" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" TargetName="GestureText" Value="#80FFFFFF" />
                <Setter Property="TextBlock.Foreground" TargetName="header" Value="White" />
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}" />
                <Setter Property="Fill" TargetName="Glyph" Value="#80FFFFFF" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" TargetName="GestureText" Value="#FF666666" />
                <Setter Property="Foreground" Value="#FF666666" />
                <Setter Property="Fill" TargetName="Glyph" Value="#FF666666" />
                <Setter Property="Opacity" TargetName="Icon" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- ************************************************************* -->
    <!--   Piano glass contextual menu style                           -->
    <!-- ************************************************************* -->
    <Style x:Key="PianoGlassContextMenuBase" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{StaticResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="{StaticResource PopupForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border CornerRadius="5" Background="{StaticResource PopupBackground}"
                            BorderBrush="{StaticResource PopupBrush}" BorderThickness="1">
                        <ScrollViewer CanContentScroll="true"
                                      Style="{StaticResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Margin="0,3,0,3" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ************************************************************* -->
    <!--   Piano glass menu item style                                 -->
    <!-- ************************************************************* -->
    <Style x:Key="PianoGlassMenuItemBase" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="#333333" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template"
                Value="{StaticResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3" />
                <Setter Property="Template"
                        Value="{StaticResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3" />
                <Setter Property="Template"
                        Value="{StaticResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3" />
                <Setter Property="Template"
                        Value="{StaticResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ************************************************************* -->
    <!--   Piano glass menu separator style                            -->
    <!-- ************************************************************* -->
    <Style x:Key="PianoGlassMenuSeparatorBase" TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Background="Transparent">
                        <Grid Margin="0,6,0,4" SnapsToDevicePixels="true">
                            <Rectangle Margin="5,0,5,1"
                                       Height="1"
                                       SnapsToDevicePixels="true"
                                       Fill="{StaticResource PopupForeground}"
                                       Opacity="0.4" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#FF333333" />
    </Style>

    <!-- ************************************************************* -->
    <!--   Piano glass menu style                                      -->
    <!-- ************************************************************* -->
    <Style x:Key="PianoGlassMenuBase" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{StaticResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="{StaticResource PopupForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="brushItemGlass" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#80FFFFFF" Offset="0" />
        <GradientStop Color="#FFFFFFFF" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="brushItemWithFocus" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#00AAFF" Offset="0" />
        <GradientStop Color="#0077FF" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="brushItemWithoutFocus" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#AAAAAA" Offset="0" />
        <GradientStop Color="#777777" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="borderItemWithFocus" Color="#800055FF" />

    <SolidColorBrush x:Key="borderItemWithoutFocus" Color="#80555555" />

    <!-- ******************************************** -->
    <!--  List view item style                        -->
    <!-- ******************************************** -->
    <Style x:Key="PianoGlassListViewItemBase" TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">

                    <!-- body -->
                    <Border SnapsToDevicePixels="true"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="0,1,0,0"
                            CornerRadius="3">
                        <Grid>
                            <Border x:Name="selectedBorder"
                                    Background="Transparent"
                                    CornerRadius="3"
                                    Margin="0,1,0,0"
                                    Visibility="Hidden">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Border Background="{StaticResource brushItemGlass}"
                                            Opacity="0.2"
                                            CornerRadius="3,3,0,0" />
                                </Grid>
                            </Border>
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="selectedBorder" Property="Background"
                                    Value="{StaticResource brushItemWithFocus}" />
                            <Setter TargetName="selectedBorder" Property="Opacity" Value="0.3" />
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="selectedBorder" Property="Background"
                                    Value="{StaticResource brushItemWithFocus}" />
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="selectedBorder" Property="Background"
                                    Value="{StaticResource brushItemWithoutFocus}" />
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource GrayTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PianoGlassListViewItemBaseLog" TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">

                    <!-- body -->
                    <Border SnapsToDevicePixels="true"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="0,1,0,0"
                            CornerRadius="3">
                        <Grid>
                            <Border x:Name="selectedBorder"
                                    Background="Transparent"
                                    CornerRadius="3"
                                    Opacity="0.3"
                                    Margin="0,1,0,0"
                                    Visibility="Visible">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Border Background="{StaticResource brushItemGlass}"
                                            Opacity="0.2"
                                            CornerRadius="3,3,0,0" />
                                </Grid>
                            </Border>
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="selectedBorder" Property="Background"
                                    Value="{StaticResource brushItemWithoutFocus}" />
                            <Setter TargetName="selectedBorder" Property="Opacity" Value="0.3" />
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="selectedBorder" Property="Background"
                                    Value="{StaticResource brushItemWithFocus}" />
                            <Setter TargetName="selectedBorder" Property="Opacity" Value="0.3" />
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    


    <!-- ******************************************** -->
    <!--  Default style                               -->
    <!-- ******************************************** -->
    <Style x:Key="TextBoxStyleBase" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="Black" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">

                    <!-- resources -->
                    <ControlTemplate.Resources>

                        <Storyboard x:Key="glowEnter">
                            <DoubleAnimation Duration="00:00:00.30" To="1" Storyboard.TargetName="buttonGlow"
                                             Storyboard.TargetProperty="(UIElement.Opacity)" />
                        </Storyboard>

                        <Storyboard x:Key="glowLeave">
                            <DoubleAnimation Duration="00:00:00.30" From="1" Storyboard.TargetName="buttonGlow"
                                             Storyboard.TargetProperty="(UIElement.Opacity)" />
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <!-- body -->
                    <Grid>

                        <!-- glow effect -->
                        <Border CornerRadius="3" Margin="1,1,1,1" Background="#FF333333" x:Name="buttonGlow" Opacity="0">
                            <Border.Effect>
                                <DropShadowEffect Direction="270" ShadowDepth="2" BlurRadius="12" Color=" #1E90FF"
                                                  Opacity="1" RenderingBias="Quality" />
                            </Border.Effect>
                        </Border>

                        <!-- outer border -->
                        <Border CornerRadius="4" Background="#FF333333" Margin="-2,-2,-2,-2"
                                BorderBrush="{StaticResource roundEmboss}" BorderThickness="0,0,0,0"
                                x:Name="outerBorder">
                            <!-- text box body -->
                            <Border CornerRadius="2" Margin="0" Background="#FF555555" BorderBrush="#FF101010"
                                    BorderThickness="1,1,1,1" x:Name="textboxBody">
                                <!-- content -->
                                <ScrollViewer x:Name="PART_ContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Border>
                    </Grid>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <!-- disabled -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>

                        <!-- mouse over effect -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource glowEnter}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource glowLeave}" />
                            </Trigger.ExitActions>
                        </Trigger>

                        <!-- focus -->
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource glowEnter}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource glowLeave}" />
                            </Trigger.ExitActions>
                            <Setter TargetName="textboxBody" Property="Background" Value="#FF686565" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboStyle" BasedOn="{x:Null}" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Background" Value="#FF686565" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton
                                Name="ToggleButton"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                            Foreground="{TemplateBinding Foreground}"
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                        </ToggleButton>
                        <Border CornerRadius="2" Margin="0" Background="#FF555555" BorderBrush="#FF101010"
                                    BorderThickness="1,1,1,1">
                        </Border>
                        <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="10,3,30,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center" />
                        <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Margin="3,3,23,3"
                                Focusable="True"                               
                                Visibility="Hidden"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False"
                                PopupAnimation="Slide">
                            <Grid
                                  Name="DropDown"
                                  SnapsToDevicePixels="True"               
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderThickness="2"
                                        BorderBrush="Gray"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>






    <!-- ******************************************** -->
    <!--  List view header style                      -->
    <!-- ******************************************** -->
    <!--WARNING:: THIS IS NOT THE PIANO HEADER APPLIED TO LISTVIEWS BY DEFAULT.
      THAT ONE IS IN HEADER.XML CHANCES ARE THIS STYLE IS OVERWRITTEN MOST OF THE TIMES -->
    <!-- ******************************************** -->

    <Style x:Key="ListViewHeaderStyleBase" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,0.15" StartPoint="0.5,0.9">
                    <GradientStop Color="#FFB9BABB" Offset="0" />
                    <GradientStop Color="#FF68676B" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid SnapsToDevicePixels="True" Background="#FF8C928C" x:Name="grid">
                        <Border x:Name="HighlightBorder" VerticalAlignment="Bottom" Height="3" BorderBrush="#FFCBC7B8"
                                BorderThickness="0,0,0,0">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#FF6C726C" Offset="1" />
                                    <GradientStop Color="#FF848A84" Offset="0" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border Margin="1,0,1,0" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="0,0,0,1" x:Name="HeaderContent"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              RecognizesAccessKey="True" />
                        </Border>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper">
                                <Thumb.Style>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="Canvas.Right" Value="-9" />
                                        <Setter Property="Width" Value="18" />
                                        <Setter Property="Height"
                                                Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Property="Padding" Value="0,3,0,4" />
                                        <Setter Property="Background" Value="#FFC7C5B2" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Background="#00999999" Padding="{TemplateBinding Padding}">
                                                        <DockPanel HorizontalAlignment="Center">
                                                            <Rectangle Fill="{TemplateBinding Background}" Width="1" />
                                                            <Rectangle Fill="#FF999999" Width="1" />
                                                        </DockPanel>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Canvas>
                        <Border x:Name="HeaderPressBorder" BorderThickness="1,1,1,1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path = Column.IsVisible}"
                                     Value="false">
                            <Setter TargetName="grid" Property="Visibility"
                                    Value="Collapsed" />
                        </DataTrigger>
                        <Trigger Property="ActualWidth"
                                 Value="0">
                            <Setter TargetName="grid" Property="IsHitTestVisible"
                                    Value="false" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="HighlightBorder" Value="#FFCE7121" />
                            <Setter Property="CornerRadius" TargetName="HighlightBorder" Value="0,0,3,3" />
                            <Setter Property="BorderThickness" TargetName="HighlightBorder" Value="0,0,0,0" />
                            <Setter Property="Background" TargetName="PART_HeaderGripper" Value="#00FFFFFF" />
                            <Setter Property="Background" Value="#FFFAF8F3" />
                            <Setter Property="Background" TargetName="grid" Value="#FF9CA29C" />
                            <Setter Property="Background" TargetName="HighlightBorder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                        <GradientStop Color="#FFDE8324" Offset="1" />
                                        <GradientStop Color="#FFC66B0C" Offset="0" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="HighlightBorder" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_HeaderGripper" Value="Hidden" />
                            <Setter Property="BorderBrush" TargetName="HeaderPressBorder" Value="#FFA5A597" />
                            <Setter Property="Margin" TargetName="HeaderPressBorder" Value="1,0,0,0" />
                            <Setter Property="Margin" TargetName="HeaderContent" Value="1,1,0,0" />
                            <Setter Property="Background" Value="#FFDEDFD8" />
                            <Setter Property="BorderBrush" Value="#FFDEDFD8" />
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ******************************************** -->
    <!--  header gripper style                        -->
    <!-- ******************************************** -->
    <Style x:Key="PianoGlassHeaderGripperBase" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-9" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Rectangle Fill="{StaticResource GridViewColumnHeaderBorderBackground}"
                                   HorizontalAlignment="Center"
                                   Width="1"
                                   Margin="0,1,0,1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ******************************************** -->
    <!--  Piano-glass header style                    -->
    <!-- ******************************************** -->
    <Style x:Key="PianoGlassHeaderBase" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">

                    <!-- body -->
                    <Grid SnapsToDevicePixels="true">

                        <Border x:Name="HeaderBorder"
                                Background="{StaticResource GridViewColumnHeaderBackground}"
                                BorderBrush="{StaticResource GridViewColumnHeaderBorderBackground}"
                                BorderThickness="0,0,0,1" />

                        <ContentPresenter x:Name="HeaderContent"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="10,0,10,1"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True" />

                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource PianoGlassHeaderGripperBase}" />
                        </Canvas>
                    </Grid>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <!-- mouse over -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="HeaderBorder" Property="Effect" Value="{StaticResource MouseOverGlow}" />
                            <Setter TargetName="HeaderBorder" Property="BorderBrush"
                                    Value="{StaticResource BrightBlueLight}" />
                            <Setter TargetName="PART_HeaderGripper" Property="Background" Value="Transparent" />
                        </Trigger>

                        <!-- pressed -->
                        <Trigger Property="IsPressed" Value="true">

                            <Setter TargetName="HeaderBorder" Property="BorderBrush"
                                    Value="{StaticResource BrightBlueTan}" />
                            <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="HeaderContent" Property="Margin" Value="0,1,0,0" />
                        </Trigger>

                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20" />
                        </Trigger>

                        <!-- disabled -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="Role" Value="Floating">
                <Setter Property="Opacity" Value="0.4082" />
                <Setter Property="Template" Value="{StaticResource FloatingHeader}" />
            </Trigger>

            <Trigger Property="Role" Value="Padding">
                <Setter Property="Template" Value="{StaticResource PaddingHeader}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ******************************************** -->
    <!--  Alternating row colors                      -->
    <!-- ******************************************** -->
    <Style x:Key="alternatingListViewItemBase" TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource PianoGlassListViewItemBase}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="ListView.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{StaticResource alternateRowColor}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource GrayTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="alternatingListViewItemBaseLog" TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource PianoGlassListViewItemBaseLog}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="ListView.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{StaticResource alternateRowColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ******************************************** -->
    <!--  Prevent gaining focus                       -->
    <!-- ******************************************** -->
    <Style x:Key="NonFocusableListViewItemBase" TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource alternatingListViewItemBase}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Focusable" Value="false" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource GrayTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- inner corner (bottom left -->
    <Geometry x:Key="ScrollBarInnerCorner">M 651,65 C651,65 651,69 651,69 651,69 655,69 655,69 652.7908325195312,69 651,67.20916748046875 651,65 z</Geometry>
    <RotateTransform x:Key="VerticalFlipTransform" Angle="180" />
    <SolidColorBrush x:Key="TreeListBackground" Color="White" Opacity="0.1" />
    <SolidColorBrush x:Key="ScrollBarBackground" Color="White" Opacity="0.20" />
    <SolidColorBrush x:Key="TreeListBorder" Color="White" Opacity="0.3" />

    <!-- ******************************************** -->
    <!--  Piano-glass grid view scroll viewer style             -->
    <!-- ******************************************** -->
    <ControlTemplate x:Key="PianoGlassGridViewScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Grid Background="{TemplateBinding Background}" UseLayoutRounding="True" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <DockPanel Grid.Row="0"
                       Grid.Column="0"
                       Margin="{TemplateBinding Padding}">

                <ScrollViewer x:Name="header"
                              Focusable="false"
                              HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"
                              DockPanel.Dock="Top">
                    <GridViewHeaderRowPresenter Margin="0"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                ColumnHeaderContainerStyle="{StaticResource PianoGlassHeaderBase}"
                                                ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                                ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                                Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" />
                </ScrollViewer>

                <Grid>

                    <!-- content -->
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            CanContentScroll="{TemplateBinding CanContentScroll}"
                                            KeyboardNavigation.DirectionalNavigation="Local" />

                    <!-- top right corner -->
                    <Path x:Name="innerCornerTopRight"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Top"
                          Width="5"
                          Height="5"
                          Stretch="Fill"
                          Data="{StaticResource ScrollBarInnerCorner}"
                          Fill="{StaticResource TreeListBackground}"
                          Visibility="{Binding Path=Visibility, ElementName=PART_VerticalScrollBar}"
                          RenderTransformOrigin="0.5,0.5"
                          RenderTransform="{StaticResource VerticalFlipTransform}" />
                </Grid>
            </DockPanel>

            <!-- vertical scrollbar -->
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Grid.Row="0"
                       Grid.Column="1"
                       Cursor="Arrow"
                       Style="{DynamicResource PianoGlassScrollBar}"
                       UseLayoutRounding="True" SnapsToDevicePixels="True"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Minimum="0"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportHeight}" />

            <!-- horizontal scrollbar -->
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Grid.Row="1"
                       Grid.Column="0"
                       Cursor="Arrow"
                       Style="{DynamicResource PianoGlassScrollBar}"
                       UseLayoutRounding="True" SnapsToDevicePixels="True"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Minimum="0"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       Orientation="Horizontal"
                       ViewportSize="{TemplateBinding ViewportWidth}" />

            <Border x:Name="BottomRightCorner"
                    Grid.Row="1" Grid.Column="1"
                    UseLayoutRounding="True" SnapsToDevicePixels="True"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Background="{StaticResource ScrollBarBackground}"
                    CornerRadius="0,0,4,0"
                    Visibility="Hidden" />
        </Grid>

        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Visibility" SourceName="PART_HorizontalScrollBar" Value="Visible" />
                    <Condition Property="Visibility" SourceName="PART_VerticalScrollBar" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="BottomRightCorner" Property="Visibility" Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ******************************************** -->
    <!--  Piano-glass list view                       -->
    <!-- ******************************************** -->
    <Style x:Key="PianoGlassListViewBase" TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource alternatingListViewItemBase}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">

                    <!-- body -->
                    <Border x:Name="body"
                            SnapsToDevicePixels="true"
                            Background="{StaticResource TreeListBackground}"
                            BorderBrush="{StaticResource TreeListBorder}"
                            BorderThickness="0"
                            Margin="0,1,0,0"
                            CornerRadius="4">
                        <ScrollViewer Foreground="White"
                                      Padding="2"
                                      Focusable="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Template="{StaticResource PianoGlassGridViewScrollViewer}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ******************************************** -->
    <!--  Piano-glass list view                       -->
    <!-- ******************************************** -->
    <Style x:Key="PianoGlassListViewBaseLog" TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource alternatingListViewItemBaseLog}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">

                    <!-- body -->
                    <Border x:Name="body"
                            SnapsToDevicePixels="true"
                            Background="{StaticResource TreeListBackground}"
                            BorderBrush="{StaticResource TreeListBorder}"
                            BorderThickness="0"
                            Margin="0,1,0,0"
                            CornerRadius="4">
                        <ScrollViewer Foreground="White"
                                      Padding="2"
                                      Focusable="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Template="{StaticResource PianoGlassGridViewScrollViewer}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DropShadowEffect x:Key="OuterGlow" Direction="270" ShadowDepth="0" BlurRadius="20" Color="Black" />
    <DropShadowEffect x:Key="OuterGlowPressed" Direction="270" ShadowDepth="0" BlurRadius="20" Color="CornflowerBlue" />
    <LinearGradientBrush x:Key="bulletBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="LightGray" Offset="0" />
        <GradientStop Color="White" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4" />
    <SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F" />

    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="Black" StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="Black" StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ******************************************** -->
    <!--  Default style                               -->
    <!-- ******************************************** -->
    <Style x:Key="CheckBoxStyleBase" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}" />
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <BulletDecorator SnapsToDevicePixels="true" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Rectangle Name="checkmark"
                                           Width="14" Height="14"
                                           Fill="{StaticResource bulletBrush}"
                                           Stroke="Black"
                                           StrokeThickness="1" />
                                <Rectangle Name="checkmarkchecked"
                                           Width="12" Height="2"
                                           Stroke="Black"
                                           StrokeThickness="0"
                                           Visibility="Hidden"
                                           RenderTransformOrigin="0.5,0.5"
                                           RadiusX="1" RadiusY="1">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush EndPoint="0.984,0.867" StartPoint="0.469,-2.719">
                                            <GradientStop Color="#FF0755E2" Offset="0" />
                                            <GradientStop Color="#FF6495ED" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="45" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="checkmarkchecked2"
                                           Width="12" Height="2"
                                           Stroke="Black"
                                           StrokeThickness="0"
                                           Visibility="Hidden"
                                           RenderTransformOrigin="0.5,0.5"
                                           RadiusX="1" RadiusY="1">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush EndPoint="0,0.8" StartPoint="0.515,-2.874">
                                            <GradientStop Color="#FF6495ED" Offset="0.004" />
                                            <GradientStop Color="#FF0755E2" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="-45" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}" />
                            <Setter Property="Padding" Value="4,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect" Value="{StaticResource OuterGlowPressed}" TargetName="checkmark" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Effect" Value="{StaticResource OuterGlow}" TargetName="checkmark" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="checkmarkchecked" />
                            <Setter Property="Visibility" Value="Visible" TargetName="checkmarkchecked2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="DimGray" />
                            <Setter Property="Opacity" Value="0.3" TargetName="checkmark" />
                            <Setter Property="Opacity" Value="0.3" TargetName="checkmarkchecked" />
                            <Setter Property="Opacity" Value="0.3" TargetName="checkmarkchecked2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *************************************************************** -->
    <!-- Left segment button template -->
    <!-- *************************************************************** -->
    <Style x:Key="LeftSegmentButtonBaseBase" TargetType="{x:Type ButtonBase}">

        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="7,5,5,5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTipService.HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">

                    <!-- body -->
                    <Grid x:Name="body" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border x:Name="buttonBody"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                Margin="1"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4,0,0,4"
                                BorderThickness="0"
                                Background="{TemplateBinding Background}"
                                Opacity="0.8" />

                        <Border x:Name="buttonBorder"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4,0,0,4"
                                BorderBrush="Black"
                                BorderThickness="1,1,0,1"
                                Opacity="0.5" />

                        <Border x:Name="buttonBorder2"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                Margin="1,1,0,1"
                                Opacity="0.5"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4,0,0,4"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,1,0,1" />

                        <Border x:Name="glasstop"
                                Grid.Row="0"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="4,0,0,0"
                                Opacity="0.6"
                                Background="{StaticResource GlassFillerTop}"
                                Margin="2,2,0,0" />

                        <!-- pushed shadow -->
                        <Border x:Name="pushedTopShadow" Width="Auto" Height="4" Margin="1,1,0,1"
                                CornerRadius="4,0,0,0"
                                HorizontalAlignment="Stretch" VerticalAlignment="Top" IsHitTestVisible="False"
                                Visibility="Hidden">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#40000000" Offset="0" />
                                    <GradientStop Color="#00000000" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="pushedRightShadow" Grid.Row="0" Grid.RowSpan="2" Width="3" Height="Auto"
                                Margin="0,4,0,1" CornerRadius="0,0,4,0"
                                HorizontalAlignment="Right" VerticalAlignment="Stretch" IsHitTestVisible="False"
                                Visibility="Hidden">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,0" StartPoint="1,0">
                                    <GradientStop Color="#40000000" Offset="0" />
                                    <GradientStop Color="#00000000" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>

                        <ContentPresenter x:Name="content"
                                          Grid.RowSpan="2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          Margin="{TemplateBinding Padding}" />
                    </Grid>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <!-- mouse over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.9" />
                            <Setter TargetName="buttonBorder2" Property="BorderBrush"
                                    Value="{StaticResource BrightBlueLight}" />
                        </Trigger>

                        <!-- focus -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.9" />
                            <Setter TargetName="buttonBorder2" Property="BorderBrush"
                                    Value="{StaticResource BrightBlueLight}" />
                        </Trigger>

                        <!-- pushed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBody" Property="Effect" Value="{x:Null}" />
                            <Setter TargetName="buttonBody" Property="Background" Value="#18000000" />
                            <Setter TargetName="buttonBody" Property="Visibility" Value="Visible" />
                            <Setter TargetName="buttonBorder" Property="BorderBrush" Value="Black" />
                            <Setter TargetName="buttonBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="buttonBorder2" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="pushedTopShadow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="pushedRightShadow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="glasstop" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="content" Property="RenderTransform"
                                    Value="{StaticResource PushedTransform}" />
                        </Trigger>

                        <!-- disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="content" Property="Opacity" Value="0.25" />
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.25" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftSegmentRepeatButtonBase" TargetType="{x:Type RepeatButton}"
           BasedOn="{StaticResource LeftSegmentButtonBaseBase}" />
    <Style x:Key="LeftSegmentButtonBase" TargetType="{x:Type Button}"
           BasedOn="{StaticResource LeftSegmentButtonBaseBase}" />

    <!-- *************************************************************** -->
    <!-- Right segment button template -->
    <!-- *************************************************************** -->
    <Style x:Key="RightSegmentButtonBaseBase" TargetType="{x:Type ButtonBase}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="5,5,7,5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTipService.HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">

                    <!-- body -->
                    <Grid x:Name="body" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border x:Name="buttonBody"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                Margin="1"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="0,4,4,0"
                                BorderThickness="0"
                                Background="{TemplateBinding Background}"
                                Opacity="0.8" />

                        <Border x:Name="buttonBorder"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="0,4,4,0"
                                BorderBrush="Black"
                                BorderThickness="0,1,1,1"
                                Opacity="0.5" />

                        <Border x:Name="buttonBorder2"
                                Grid.RowSpan="2"
                                SnapsToDevicePixels="True"
                                Margin="0,1,1,1"
                                Opacity="0.5"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="0,4,4,0"
                                BorderBrush="White"
                                BorderThickness="0,1,1,1" />

                        <Border x:Name="glasstop"
                                Grid.Row="0"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                CornerRadius="0,4,0,0"
                                Opacity="0.6"
                                Background="{StaticResource GlassFillerTop}"
                                Margin="0,2,2,0" />

                        <!-- pushed shadow -->
                        <Border x:Name="pushedTopShadow" Width="Auto" Height="4" Margin="0,1,1,1"
                                CornerRadius="0,4,0,0"
                                HorizontalAlignment="Stretch" VerticalAlignment="Top" IsHitTestVisible="False"
                                Visibility="Hidden">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#40000000" Offset="0" />
                                    <GradientStop Color="#00000000" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="pushedLeftShadow" Grid.Row="0" Grid.RowSpan="2" Width="3" Height="Auto"
                                Margin="0,4,0,1" CornerRadius="0,0,0,4"
                                HorizontalAlignment="Left" VerticalAlignment="Stretch" IsHitTestVisible="False"
                                Visibility="Hidden">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="#40000000" Offset="0" />
                                    <GradientStop Color="#00000000" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>

                        <ContentPresenter x:Name="content"
                                          Grid.RowSpan="2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          Margin="{TemplateBinding Padding}" />
                    </Grid>

                    <!-- triggers -->
                    <ControlTemplate.Triggers>

                        <!-- mouse over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.9" />
                            <Setter TargetName="buttonBorder2" Property="BorderBrush"
                                    Value="{StaticResource BrightBlueLight}" />
                        </Trigger>

                        <!-- focus -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.9" />
                            <Setter TargetName="buttonBorder2" Property="BorderBrush"
                                    Value="{StaticResource BrightBlueLight}" />
                        </Trigger>

                        <!-- pushed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBody" Property="Effect" Value="{x:Null}" />
                            <Setter TargetName="buttonBody" Property="Background" Value="#18000000" />
                            <Setter TargetName="buttonBody" Property="Visibility" Value="Visible" />
                            <Setter TargetName="buttonBorder" Property="BorderBrush" Value="Black" />
                            <Setter TargetName="buttonBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="buttonBorder2" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="pushedTopShadow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="pushedLeftShadow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="glasstop" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="content" Property="RenderTransform"
                                    Value="{StaticResource PushedTransform}" />
                        </Trigger>

                        <!-- disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="content" Property="Opacity" Value="0.25" />
                            <Setter TargetName="glasstop" Property="Opacity" Value="0.25" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightSegmentRepeatButtonBase" TargetType="{x:Type RepeatButton}"
           BasedOn="{StaticResource RightSegmentButtonBaseBase}" />
    <Style x:Key="RightSegmentButtonBase" TargetType="{x:Type Button}"
           BasedOn="{StaticResource RightSegmentButtonBaseBase}" />



    <Style x:Key="ActiveRelay" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="Green" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value ="11.5" />
        <Setter Property="Width" Value ="35" />
        <Setter Property="Height" Value ="35" />
        <Setter Property="MaxWidth" Value ="35" />
        <Setter Property="MaxHeight" Value ="35" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <!-- body -->
                    <Grid>
                        <!-- glow effect -->
                        <Border CornerRadius="3" Margin="1,1,1,1" Background="Green" x:Name="buttonGlow" Opacity="0">
                            <Border.Effect>
                                <DropShadowEffect Direction="270" ShadowDepth="2" BlurRadius="12" Color="#FF00FF15"
                                                  Opacity="1" RenderingBias="Quality" />
                            </Border.Effect>
                        </Border>

                        <!-- outer border -->
                        <Border CornerRadius="4" Background="#FF333333" Margin="-2,-2,-2,-2"
                                BorderBrush="{StaticResource roundEmboss}" BorderThickness="0,0,0,0"
                                x:Name="outerBorder">
                            <!-- text box body -->
                            <Border CornerRadius="2" Margin="0" Background="Green" BorderBrush="#FF101010"
                                    BorderThickness="0,0,0,0" x:Name="textboxBody">
                                <Border.Effect>
                                    <DropShadowEffect Direction="270" ShadowDepth="2" BlurRadius="12" Color="#FF00FF7B"
                                                  Opacity="0.8" RenderingBias="Quality" />
                                </Border.Effect>
                                <!-- content -->
                                <ScrollViewer x:Name="PART_ContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
<Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
      
    <Setter.Value>
      <ControlTemplate TargetType="{x:Type TabItem}">
        <Grid>
          <Border 
              Name="Border"
              Background="#FF2A2A2A"
              BorderBrush="#FF646464" 
              BorderThickness="1,1,1,1" 
              CornerRadius="6,6,0,0" >
            <ContentPresenter x:Name="ContentSite"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                ContentSource="Header"
                Margin="12,2,12,2"/>
          </Border>
        </Grid>
        <ControlTemplate.Triggers>
          <Trigger Property="IsSelected" Value="True">
            <Setter TargetName="Border" Property="Background" Value="#FF005EA4" />
          </Trigger>
          <Trigger Property="IsSelected" Value="False">
           <Setter TargetName="Border" Property="Background" Value="#FF646464" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
    </Setter.Value>
  </Setter>
</Style>

    <Style  TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel 
              Grid.Row="0"
              Panel.ZIndex="1" 
              Margin="0,0,0,0" 
              IsItemsHost="True"
              Background="Transparent" />
                        <Border 
              Grid.Row="1"
              BorderBrush="#FF0088EE" 
              BorderThickness="1" 
              CornerRadius="0, 0, 0, 0" >
                            <Border.Background>
                                <LinearGradientBrush>
                                    <GradientStop Color="#FF2A2A2A" Offset="0" />
                                    <GradientStop Color="#FF2A2A2A" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="NormalRelay" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="Red" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value ="11.5" />
        <Setter Property="Width" Value ="35" />
        <Setter Property="Height" Value ="35" />
        <Setter Property="MaxWidth" Value ="35" />
        <Setter Property="MaxHeight" Value ="35" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                        <!-- body -->
                    <Grid>
                        <!-- glow effect -->
                        <Border CornerRadius="3" Margin="1,1,1,1" Background="Red" x:Name="buttonGlow" Opacity="0">
                            <Border.Effect>
                                <DropShadowEffect Direction="270" ShadowDepth="2" BlurRadius="12" Color="#FFB90000"
                                                  Opacity="1" RenderingBias="Quality" />
                            </Border.Effect>
                        </Border>

                        <!-- outer border -->
                        <Border CornerRadius="4" Background="#FF333333" Margin="-2,-2,-2,-2"
                                BorderBrush="{StaticResource roundEmboss}" BorderThickness="0,0,0,0"
                                x:Name="outerBorder">
                            <!-- text box body -->
                            <Border CornerRadius="2" Margin="0" Background="Red" BorderBrush="#FF101010"
                                    BorderThickness="0,0,0,0" x:Name="textboxBody">
                                <Border.Effect>
                                    <DropShadowEffect Direction="270" ShadowDepth="2" BlurRadius="12" Color="#FFFF1818"
                                                  Opacity="1" RenderingBias="Quality" />
                                </Border.Effect>
                                <!-- content -->
                                <ScrollViewer x:Name="PART_ContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="IdleRelay" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="Green" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value ="11.5" />
        <Setter Property="Width" Value ="35" />
        <Setter Property="Height" Value ="35" />
        <Setter Property="MaxWidth" Value ="35" />
        <Setter Property="MaxHeight" Value ="35" />



        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <!-- body -->
                    <Grid>
                        <!-- glow effect -->
                        <Border CornerRadius="3" Margin="1,1,1,1" Background="Green" x:Name="buttonGlow" Opacity="0">
                            <Border.Effect>
                                <DropShadowEffect Direction="270" ShadowDepth="2" BlurRadius="12" Color="#FF00FF15"
                                                  Opacity="1" RenderingBias="Quality" />
                            </Border.Effect>
                        </Border>

                        <!-- outer border -->
                        <Border CornerRadius="4" Background="#FF333333" Margin="-2,-2,-2,-2"
                                BorderBrush="{StaticResource roundEmboss}" BorderThickness="0,0,0,0"
                                x:Name="outerBorder">
                            <!-- text box body -->
                            <Border CornerRadius="2" Margin="0" Background="Gray" BorderBrush="#FF101010"
                                    BorderThickness="0,0,0,0" x:Name="textboxBody">
                                <!-- content -->
                                <ScrollViewer x:Name="PART_ContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Border>
                    </Grid>
                   </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style x:Key="GroupBoxStyle" BasedOn="{x:Null}" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#D5DFE5" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="{TemplateBinding Background}" />
                        <Border Name="Header" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BorderVisibleOnMouse" TargetType="Border">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="CornflowerBlue"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>