using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GestionStationnement.Helpers
{

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ISensorUpdateService",
        CallbackContract = typeof (ISensorUpdateServiceCallback), SessionMode = System.ServiceModel.SessionMode.Required
        )]
    public interface ISensorUpdateService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ISensorUpdateService/Subscribe",
            ReplyAction = "http://tempuri.org/ISensorUpdateService/SubscribeResponse")]
        void Subscribe();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ISensorUpdateService/Subscribe",
            ReplyAction = "http://tempuri.org/ISensorUpdateService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ISensorUpdateService/Unsubscribe",
            ReplyAction = "http://tempuri.org/ISensorUpdateService/UnsubscribeResponse")]
        void Unsubscribe();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ISensorUpdateService/Unsubscribe",
            ReplyAction = "http://tempuri.org/ISensorUpdateService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();

        [System.ServiceModel.OperationContractAttribute(
            Action = "http://tempuri.org/ISensorUpdateService/PublishSensorUpdate",
            ReplyAction = "http://tempuri.org/ISensorUpdateService/PublishSensorUpdateResponse")]
        void PublishSensorUpdate(Guid guid, string propertyname, string propertyvalue);

        [System.ServiceModel.OperationContractAttribute(
            Action = "http://tempuri.org/ISensorUpdateService/PublishSensorUpdate",
            ReplyAction = "http://tempuri.org/ISensorUpdateService/PublishSensorUpdateResponse")]
        System.Threading.Tasks.Task PublishSensorUpdateAsync(Guid guid, string propertyname, string propertyvalue);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorUpdateServiceCallback
    {

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true,
            Action = "http://tempuri.org/ISensorUpdateService/SensorUpdate")]
        void SensorUpdate(GestionStationnement.Models.Sensor sensor);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorUpdateServiceChannel : ISensorUpdateService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorUpdateServiceClient : System.ServiceModel.DuplexClientBase<ISensorUpdateService>,
        ISensorUpdateService
    {

        public SensorUpdateServiceClient(System.ServiceModel.InstanceContext callbackInstance) :
            base(callbackInstance)
        {
        }

        public SensorUpdateServiceClient(System.ServiceModel.InstanceContext callbackInstance,
            string endpointConfigurationName) :
                base(callbackInstance, endpointConfigurationName)
        {
        }

        public SensorUpdateServiceClient(System.ServiceModel.InstanceContext callbackInstance,
            string endpointConfigurationName, string remoteAddress) :
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }

        public SensorUpdateServiceClient(System.ServiceModel.InstanceContext callbackInstance,
            string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }

        public SensorUpdateServiceClient(System.ServiceModel.InstanceContext callbackInstance,
            System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(callbackInstance, binding, remoteAddress)
        {
        }

        public void Subscribe()
        {
            base.Channel.Subscribe();
        }

        public System.Threading.Tasks.Task SubscribeAsync()
        {
            return base.Channel.SubscribeAsync();
        }

        public void Unsubscribe()
        {
            base.Channel.Unsubscribe();
        }

        public System.Threading.Tasks.Task UnsubscribeAsync()
        {
            return base.Channel.UnsubscribeAsync();
        }

        public void PublishSensorUpdate(Guid guid, string propertyname, string propertyvalue)
        {
            base.Channel.PublishSensorUpdate(guid, propertyname, propertyvalue);
        }

        public System.Threading.Tasks.Task PublishSensorUpdateAsync(Guid guid, string propertyname, string propertyvalue)
        {
            return base.Channel.PublishSensorUpdateAsync(guid, propertyname, propertyvalue);
        }
    }
}


